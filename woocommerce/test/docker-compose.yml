version: "3" 
# Defines which compose version to use
services:
  # Services line define which Docker images to run. In this case, it will be MySQL server and WordPress image.
  db:
    image: mysql/mysql-server:8.0
    # image: mysql:5.7 indicates the MySQL database container image from Docker Hub used in this installation.
    platform: linux/arm64
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: MyR00tMySQLPa$$5w0rD
      MYSQL_DATABASE: MyWordPressDatabaseName
      MYSQL_USER: MyWordPressUser
      MYSQL_PASSWORD: Pa$$5w0rD
      # Previous four lines define the main variables needed for the MySQL container to work: database, database username, database user password, and the MySQL root password.
    volumes:
      - ./mysql_data:/var/lib/mysql
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    restart: always
      # The previous line defines the port that the WordPress container will use. After successful installation, the full path will look like this: http://localhost:8000
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: MyWordPressUser
      WORDPRESS_DB_PASSWORD: Pa$$5w0rD
      WORDPRESS_DB_NAME: MyWordPressDatabaseName
      WORDPRESS_DEBUG: "true"  # Set to "true" to enable debugging
      VIRTUAL_HOST: test.com  # Set your domain
      VIRTUAL_PORT: 80        # Set the port where WordPress is running
    ports:
      - "8222:80"
# Similar to MySQL image variables, the last four lines define the main variables needed for the WordPress container to work properly with the MySQL container.
    volumes:
      - "./files/:/var/www/html"
      - "./php.ini:/usr/local/etc/php/conf.d/php.ini"  # Mount custom php.ini file
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./nginx/html/:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
volumes:
  mysql: {}
